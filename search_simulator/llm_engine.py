from langchain_community.llms import OpenAI
from langchain_openai import ChatOpenAI

class LLMEngine:
    """
        A class to interact with various language models (LLMs) using LangChain.

        Attributes:
            model_name (str): The name of the model to use (default is 'gpt-3.5-turbo').
            api_key (str): The API key to access the LLM.
            llm: The initialized LLM object from LangChain.
        """
    def __init__(self, model_name='gpt-3.5-turbo', api_key=""):
        """
        Initializes the LLMEngine instance with a specified model and API key.

        Args:
            model_name (str, optional): The name of the model to use (default is 'gpt-3.5-turbo').
            api_key (str, optional): The API key for accessing the LLM (default is a placeholder key).
        """
        self.model_name = model_name
        self.api_key = api_key
        self.llm = self.initialize_llm()
    
    def initialize_llm(self):
        # Initialize the LLM using LangChain
        """
        Initializes the appropriate LLM using the LangChain library.

        Returns:
            llm: An LLM object initialized for the specified model name.
                 Uses `ChatOpenAI` for GPT models and `OpenAI` for others.
        """
        if 'gpt-3.5' in self.model_name or 'gpt-4' in self.model_name:
            return ChatOpenAI(model_name=self.model_name, openai_api_key=self.api_key)
        else:
            return OpenAI(model_name=self.model_name, openai_api_key=self.api_key)
    
    def generate(self, prompt):
        """
        Generates a response from the initialized LLM for a given prompt.

        Args:
            prompt (list): A list of tuples containing messages in the format (role, content),
                           where role is 'system', 'human', or 'assistant'.

        Returns:
            str: The content of the response generated by the LLM.
        """
        # Generate a response from the LLM
        response = self.llm.invoke(prompt)
        return response
    
if __name__ == "__main__":
    llm = LLMEngine()
    print(llm.generate([
    (
        "system",
        "You are a mathematician, use mathematics to answer every question. .",
    ),
    ("human", "How many starts are in the sky?"),
]).content)