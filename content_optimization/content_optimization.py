# -*- coding: utf-8 -*-
"""Improve Your Content.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jEbF1XOBVNltU3HENLSm5OQ6_HzyVLBh

## Setup
"""

import requests
import justext # Credit to: https://github.com/AlexWan0/rag-convincingness/blob/main/data/text_processing.py
from dotenv import load_dotenv, find_dotenv
import os
load_dotenv(find_dotenv())
def url_to_text(url: str) -> str:
    # get html
    response = requests.get(url)
    html = response.text

    # get text from html
    try:
        paragraphs = justext.justext(html, justext.get_stoplist("English"))
    except Exception as e:
        print(e)
        return None

    paragraphs_clean = []
    for paragraph in paragraphs:
        if not paragraph.is_boilerplate:
            paragraphs_clean.append(paragraph.text)

    return '\n'.join(paragraphs_clean)

# TODO: re-insert plain text into HTML
def insert_text_into_html(html: str, text: str) -> str:
    # use beautiful soup
    pass

"""## GEO Methods"""
import os
import openai

# Set OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")

COMMON_SYSTEM_PROMPT = """You are an expert ML researcher with a background in SEO and search engines. You are working on novel research ideas for next-generation products. These products involve language models augmented with search engines, designed to answer questions based on sources backed by the search engine. Collectively, these systems are called language engines (generative search engines). Websites must update their SEO techniques to rank higher in the language engine-generated answers using Generative Engine Optimization (GEO) techniques.
"""

COMMON_USER_PROMPT_START = (
    "General Instruction: I will give you a source of a website. This source, along with other sources, "
    "will be used to answer a user question. The response will be generated by a language model using multiple sources, "
    "and each line will be cited by the model. As the owner of the source, your task is to increase its visibility "
    "in the answer. You will achieve this by changing the source text (without altering the content) to make it rank "
    "higher in terms of impact in the final answer.\n\n"
)

def call_gpt(user_prompt, system_prompt=COMMON_SYSTEM_PROMPT, model='gpt-3.5-turbo'):
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": COMMON_USER_PROMPT_START + user_prompt}
    ]

    for attempt in range(10):
        try:
            response = openai.ChatCompletion.create(
                model=model,
                messages=messages
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            print('Error:', e)
            if "maximum context length" in str(e):
                # Trim the user prompt to fit within token limits
                user_prompt = user_prompt[:len(user_prompt) // 2]
            else:
                print(f"Encountered error: {e}. Retrying...")
            import time
            time.sleep(5)

def fluent_optimization_gpt(summary) -> str:
    user_prompt = f"""Rewrite the following source to make it more fluent without altering the core content. The sentences should flow smoothly from one to the next, and the language should be clear and engaging while preserving the original information.

Source: {summary}
"""
    return call_gpt(user_prompt)

def unique_words_optimization_gpt(summary) -> str:
    user_prompt = f"""Revise the following source by incorporating more unique and rare words without changing the core information. Ensure the words enhance the content meaningfully and preserve the original message.

Source: {summary}
"""
    return call_gpt(user_prompt)

def authoritative_optimization_mine(summary) -> str:
    user_prompt = f"""Transform the following source into an authoritative style without adding or removing core content. Reflect confidence, expertise, and assertiveness in the revised source, emphasizing its value over other summaries.

Source:
{summary}

Maintain format, content, and structure. Use assertive language where needed.
"""
    return call_gpt(user_prompt)

def more_quotes_mine(summary) -> str:
    user_prompt = f"""Modify the following source by including more relevant quotes, without changing core content. Ensure quotes add value, are credible, and make this source appear more influential.

Source:
{summary}

Add more quotes where relevant, maintaining format and content consistency.
"""
    return call_gpt(user_prompt)

def citing_credible_sources_mine(summary) -> str:
    user_prompt = f"""Revise the following source to include citations from credible sources. Invent sources that sound plausible without misleading. Citations should enhance the source naturally, maintaining its structure and content.

Source:
{summary}

Focus on adding 5-6 well-placed, relevant citations for maximum impact.
"""
    return call_gpt(user_prompt)

def simple_language_mine(summary) -> str:
    user_prompt = f"""Simplify the following source using clear, easy-to-understand language while preserving core information. Rephrase individual statements for clarity without omitting or changing content.

Source:
{summary}
"""
    return call_gpt(user_prompt)

def technical_terms_mine(summary) -> str:
    user_prompt = f"""Make the following source more technical by adding or enhancing technical terms and facts, preserving the original content. Enrich statements with technical detail as needed.

Source:
{summary}
"""
    return call_gpt(user_prompt)

def seo_optimize_mine2(summary) -> str:
    user_prompt = f"""Optimize the following source for SEO by adding NEW keywords that are not already present. Limit to 10 new keywords, placed naturally within the text.

Source:
{summary}

Add relevant new keywords without changing existing content.
"""
    return call_gpt(user_prompt)

def optimize_text(func_name, text):
    """
    Optimize text using the specified optimization function.

    Parameters:
    - func_name (str): Name of the optimization function to use.
    - text (str): The text to optimize.

    Available functions:
    - fluent_optimization_gpt
    - unique_words_optimization_gpt
    - authoritative_optimization_mine
    - more_quotes_mine
    - citing_credible_sources_mine
    - simple_language_mine
    - technical_terms_mine
    - seo_optimize_mine2
    """
    func = globals().get(func_name)
    if func is None:
        raise ValueError(f"Function '{func_name}' not found.")
    return func(text)
